name: XRNX Package and Release

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  package-and-release:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Find and Package .xrnx Directories
      - name: Package XRNX Files
        id: package_xrnx
        run: |
          mkdir -p packaged
          # Loop through all directories ending with .xrnx
          find . -type d -name "*.xrnx" | while read -r xrnx_dir; do
            xrnx_name=$(basename "$xrnx_dir")
            # Zip the contents of the directory into a .xrnx file
            zip -r "packaged/$xrnx_name" "$xrnx_dir"/*
          done
          # List all packaged files
          ls -1 packaged/*.xrnx > packaged_files.txt

      # Generate a tag name
      - name: Generate Tag Name
        run: |
          echo "TAG_NAME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      # Create and push a tag
      - name: Create and Push Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag $TAG_NAME
          git push origin $TAG_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create a GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      # Upload each XRNX file to the release
      - name: Upload XRNX Files to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          while read -r asset_path; do
            asset_name=$(basename "$asset_path")
            echo "Uploading $asset_name"
            curl \
              -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$asset_path" \
              "${{ steps.create_release.outputs.upload_url }}"?name="$asset_name"
          done < packaged_files.txt
